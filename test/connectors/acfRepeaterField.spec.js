/* global expect, describe, it, beforeEach */
const SequelizeMock = require('sequelize-mock')

const getAppleInformationLocation = require('../../graphql/modules/CustomFields/connectors/getAppleInformationLocation')
const samplePostmetaData = require('./sampleData/Postmeta')
const samplePostData = require('./sampleData/Post')

describe('acfRepeaterField', () => {
  let PostMock, PostmetaMock
  beforeEach(async () => {
    const DBConnectionMock = new SequelizeMock()
    /**
     * See https://github.com/BlinkUX/sequelize-mock/blob/master/src/model.js
     * line 45 for default options passed to mock models
     */
    PostMock = DBConnectionMock.define('post', {}, {
      autoQueryFallback: false,
      timestamps: false,
      hasPrimaryKeys: false
    })
    PostmetaMock = DBConnectionMock.define('postmeta', {}, {
      autoQueryFallback: false,
      timestamps: false,
      hasPrimaryKeys: false
    })
    /**
     * https://github.com/BlinkUX/sequelize-mock/issues/43
     * https://sequelize-mock.readthedocs.io/en/latest/docs/mock-queries/
     * Each query will return the first available result from the list.
     * 1. The value generated by a query handler
     * 2. If not available, the next result queued for the object the query is being run on
     * 3. If not available, it will return the next result queued for any parent object. For Models, this is the Sequelize object the Model was defined with (using db.define)
     * 4. If not available and being called on a Model, it will return an automatically generated result based on the defaults of the Model being queried, unless configured otherwise
     * 5. Any fallback function defined in the configuration for the object
     */
    PostmetaMock.$queryInterface.$useHandler(function (query, queryOptions, done) {
      if (query === 'findOne') {
        return samplePostmetaData.data.find(s =>
          Object.entries(queryOptions[0].where).map(([ key, value ]) => s[key] === value).every(v => v)
        )
      }
    })
    PostMock.$queueResult(samplePostData.data.map(s => PostMock.build(s)))
    PostmetaMock.$queueResult(samplePostmetaData.data.map(s => PostmetaMock.build(s)))
  })

  it('retrieves all repeater subfields', async () => {
    // PostMock.findAll().then(posts => console.log(posts.map(p => p.ID)))
    const value = await getAppleInformationLocation(PostMock, PostmetaMock)({ postId: 8 })
    expect(value).toEqual('Queensland')
  })
})
