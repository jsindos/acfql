/* global expect, describe, it, beforeEach */
const SequelizeMock = require('sequelize-mock')

const applyHandlers = require('../../utilities').applyHandlers

const getFeaturedImage = require('./graphql/modules/Post/connectors/getFeaturedImage')
const getPost = require('./graphql/modules/Post/connectors/getPost')
const getPosts = require('./graphql/modules/Post/connectors/getPosts')
const getLandingPageInformationMixProgramImage = require('./graphql/modules/CustomFields/connectors/getLandingPageInformationMixProgramImage')
const getLandingPageInformationMixProgramDownload = require('./graphql/modules/CustomFields/connectors/getLandingPageInformationMixProgramDownload')
const getAboutPageImagesImages = require('./graphql/modules/CustomFields/connectors/getAboutPageImagesImages')

const samplePostmetaData = require('./testData/Postmeta')
const samplePostData = require('./testData/Post')
const sampleTermTaxonomyData = require('./testData/TermTaxonomy')

describe('mixFestival', () => {
  let PostMock, PostmetaMock, TermTaxonomyMock
  const i18nEnabledSettings = { privateSettings: { languageEnabled: true, defaultLanguage: 'en' } }
  beforeEach(async () => {
    const DBConnectionMock = new SequelizeMock()
    /**
     * See https://github.com/BlinkUX/sequelize-mock/blob/master/src/model.js
     * line 45 for default options passed to mock models
     */
    PostMock = DBConnectionMock.define('post', {}, {
      autoQueryFallback: false,
      timestamps: false,
      hasPrimaryKeys: false
    })
    PostmetaMock = DBConnectionMock.define('postmeta', {}, {
      autoQueryFallback: false,
      timestamps: false,
      hasPrimaryKeys: false
    })
    TermTaxonomyMock = DBConnectionMock.define('term_taxonomy', {}, {
      autoQueryFallback: false,
      timestamps: false,
      hasPrimaryKeys: false
    })
    /**
     * https://github.com/BlinkUX/sequelize-mock/issues/43
     * https://sequelize-mock.readthedocs.io/en/latest/docs/mock-queries/
     * Each query will return the first available result from the list.
     * 1. The value generated by a query handler
     * 2. If not available, the next result queued for the object the query is being run on
     * 3. If not available, it will return the next result queued for any parent object. For Models, this is the Sequelize object the Model was defined with (using db.define)
     * 4. If not available and being called on a Model, it will return an automatically generated result based on the defaults of the Model being queried, unless configured otherwise
     * 5. Any fallback function defined in the configuration for the object
     */
    applyHandlers(PostmetaMock, samplePostmetaData)
    applyHandlers(PostMock, samplePostData)
    applyHandlers(TermTaxonomyMock, sampleTermTaxonomyData)
    // PostMock.$queueResult(samplePostData.data.map(s => PostMock.build(s)))
    // PostmetaMock.$queueResult(samplePostmetaData.data.map(s => PostmetaMock.build(s)))
  })

  it('thumbnail retrieved by custom post types', async () => {
    // This is the id of a screening
    const screeningFeaturedImage = await getFeaturedImage(PostMock, PostmetaMock)({ postId: 691 })
    expect(screeningFeaturedImage.src).toEqual('http://mix.backend.test/wp-content/uploads/2018/09/MV5BZmU2MjllMWYtZDA3MS00YjJjLWE3MDQtM2RlMzViZGUyMzhkXkEyXkFqcGdeQXVyMjQ3NzUxOTM@._V1_.jpg')
  })

  it('getPosts and custom field resolvers retrieves image custom fields from default language post', async () => {
    // There is only one Danish landing page
    const danishLandingPage = (await getPosts(PostMock, null, null, TermTaxonomyMock, i18nEnabledSettings)({
      postType: 'wp_landing_page',
      language: 'da'
    }))[0]
    const image = await getLandingPageInformationMixProgramImage(PostMock, PostmetaMock, i18nEnabledSettings)({
      postId: danishLandingPage.ID,
      additionalFields: danishLandingPage.additionalFields
    })
    expect(image).toEqual('http://mix.backend.test/wp-content/uploads/2018/06/MIX18_program_240x170_opslag_lowres_PRINT-1.jpg')
  })

  it('getPosts retrieves file custom fields from `en` post', async () => {
    // There is only one Danish landing page
    const danishLandingPage = (await getPosts(PostMock, null, null, TermTaxonomyMock, i18nEnabledSettings)({
      postType: 'wp_landing_page',
      language: 'da'
    }))[0]
    const file = await getLandingPageInformationMixProgramDownload(PostMock, PostmetaMock, i18nEnabledSettings)({
      postId: danishLandingPage.ID,
      additionalFields: danishLandingPage.additionalFields
    })
    expect(file).toEqual('http://mix.backend.test/wp-content/uploads/2018/06/MIX18_program_240x170_opslag_lowres_PRINT-1.pdf')
  })

  it('getPost retrieves image custom fields from `en` post', async () => {
    // postId 493 for `da` LandingPage
    const danishLandingPage = (await getPost(PostMock, TermTaxonomyMock, i18nEnabledSettings)({
      id: 493
    }))
    const image = await getLandingPageInformationMixProgramImage(PostMock, PostmetaMock, i18nEnabledSettings)({
      postId: danishLandingPage.ID,
      additionalFields: danishLandingPage.additionalFields
    })
    expect(image).toEqual('http://mix.backend.test/wp-content/uploads/2018/06/MIX18_program_240x170_opslag_lowres_PRINT-1.jpg')
  })

  it.skip('retrieves image repeater custom fields from `en` post', async () => {
    // postId 490 for `da` AboutPage with repeater images on `en` translation page
    const images = await getAboutPageImagesImages(PostMock, PostmetaMock)({ postId: 490 })
    expect(images).toHaveLength(5)
    expect(images).toContainEqual(
      expect.objectContaining({ image: 'http://mix.backend.test/wp-content/uploads/2018/06/c7.jpeg' })
    )
    expect(images).toContainEqual(
      expect.objectContaining({ image: 'http://mix.backend.test/wp-content/uploads/2018/06/c21.jpeg' })
    )
    expect(images).toContainEqual(
      expect.objectContaining({ image: 'http://mix.backend.test/wp-content/uploads/2018/09/MV5BNjc0OTA5ZjktZDM0NC00YTEwLTg5MGUtYjlhOTBjZjc5Mzc4XkEyXkFqcGdeQXVyNTYxMzIxNDM@._V1_.jpg' })
    )
    expect(images).toContainEqual(
      expect.objectContaining({ image: 'http://mix.backend.test/wp-content/uploads/2018/09/MV5BZmU2MjllMWYtZDA3MS00YjJjLWE3MDQtM2RlMzViZGUyMzhkXkEyXkFqcGdeQXVyMjQ3NzUxOTM@._V1_SY1000_SX750_AL_.jpg' })
    )
    expect(images).toContainEqual(
      expect.objectContaining({ image: 'http://mix.backend.test/wp-content/uploads/2018/06/Pre-Drink_Key_Art.jpg.0x600_q85.jpg' })
    )
  })
})
