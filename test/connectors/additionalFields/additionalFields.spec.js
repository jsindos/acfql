/* global expect, describe, it, beforeEach */
const SequelizeMock = require('sequelize-mock')

const applyHandlers = require('../../utilities').applyHandlers

const getFeaturedImage = require('./graphql/modules/Post/connectors/getFeaturedImage')
const getPost = require('./graphql/modules/Post/connectors/getPost')

const samplePostmetaData = require('./testData/Postmeta')
const samplePostData = require('./testData/Post')

describe('internationalisation', () => {
  let PostMock, PostmetaMock
  beforeEach(async () => {
    const DBConnectionMock = new SequelizeMock()
    /**
     * See https://github.com/BlinkUX/sequelize-mock/blob/master/src/model.js
     * line 45 for default options passed to mock models
     */
    PostMock = DBConnectionMock.define('post', {}, {
      autoQueryFallback: false,
      timestamps: false,
      hasPrimaryKeys: false
    })
    PostmetaMock = DBConnectionMock.define('postmeta', {}, {
      autoQueryFallback: false,
      timestamps: false,
      hasPrimaryKeys: false
    })
    /**
     * https://github.com/BlinkUX/sequelize-mock/issues/43
     * https://sequelize-mock.readthedocs.io/en/latest/docs/mock-queries/
     * Each query will return the first available result from the list.
     * 1. The value generated by a query handler
     * 2. If not available, the next result queued for the object the query is being run on
     * 3. If not available, it will return the next result queued for any parent object. For Models, this is the Sequelize object the Model was defined with (using db.define)
     * 4. If not available and being called on a Model, it will return an automatically generated result based on the defaults of the Model being queried, unless configured otherwise
     * 5. Any fallback function defined in the configuration for the object
     */
    applyHandlers(PostmetaMock, samplePostmetaData)
    applyHandlers(PostMock, samplePostData)
    // PostMock.$queueResult(samplePostData.data.map(s => PostMock.build(s)))
    // PostmetaMock.$queueResult(samplePostmetaData.data.map(s => PostmetaMock.build(s)))
  })

  it('retrieves featured image', async () => {
    const featuredImage = await getFeaturedImage(PostMock, PostmetaMock)({ postId: 69 })
    expect(featuredImage).toEqual('http://testpress.localhost/wp-content/uploads/2019/01/Emma-Watson-Wallpapers-sayou-30461666-1600-1200.jpg')
  })

  it('retrieves post type', async () => {
    const post = await getPost(PostMock, PostmetaMock)({ postId: 69 })
    expect(post.postType).toEqual('post')
  })
})
